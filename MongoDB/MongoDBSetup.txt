For the students who have Windows laptops with you, you can follow the instructions here to install MongoDB.

https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-windows/Links to an external site.

For MacOS users, follow the instructions from this link: https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-os-x/#install-homebrewLinks to an external site.

Import sample data
Download this file from https://raw.githubusercontent.com/mongodb/docs-assets/primer-dataset/primer-dataset.jsonLinks to an external site.

And then run one of the below commands for either Windows or Mac: NOTE You may need to change the path to your mongoimport.exe file or the primer-dateset.json file depending on where you installed or downloaded the files

mongoimport --db test --collection restaurants --drop --file ~/downloads/primer-dataset.json
"C:\Program Files\MongoDB\Server\4.0.3\bin\mongoimport.exe" --db test --collection restaurants --drop --file C:\Users\IEUser\Downloads\primer-dataset.json
Mongo shell commands
Once you finish the installation of MongoDB, you should also have Mongo shell installed along with the MongoDB server.

You can start the shell by typing in mongo.

For windows user, look for mongo.exe under your MongoDB folder

CRUD with Mongo shell
CRUD stands for Create, Read, Update and Delete. Often used to describe the basic functionality of an app.

In the following sections, we will be discussing the CRUD operations with Mongo shell.

Before using any of the CRUD commands, you will need change your database (just like mysql you have to use database).

use test;
Common debugging commands
# to see all databases
# equals to `show databases;` in MySQL
show dbs; 

# to see all collections
# equals to `show tables;` in MySQL
show collections;
To create and insert a document, you can use the following command:
db.restaurants.insert(
   {
      "address" : {
         "street" : "2 Avenue",
         "zipcode" : "10075",
         "building" : "1480",
         "coord" : [ -73.9557413, 40.7720266 ]
      },
      "borough" : "Manhattan",
      "cuisine" : "Italian",
      "grades" : [
         {
            "date" : ISODate("2014-10-01T00:00:00Z"),
            "grade" : "A",
            "score" : 11
         },
         {
            "date" : ISODate("2014-01-16T00:00:00Z"),
            "grade" : "B",
            "score" : 17
         }
      ],
      "name" : "Vella",
      "restaurant_id" : "41704620"
   }
);
To read or find a document, you can use the following commands. (NOTE, just doing a "find()" command will output ugly JSON. Use ".find().pretty()" to pretty print the json)
// to find all documents under `restaurants`
db.restaurants.find()

// to find a specific restaurant with a column
db.restaurants.find( { "borough": "Manhattan" } )

// or you can even find a field in an embeded document 
db.restaurants.find( { "address.zipcode": "10075" } )

// query against a field of an array
db.restaurants.find( { "grades.grade": "B" } )

// if you want to use greater sign
db.restaurants.find( { "grades.score": { $gt: 30 } } )

// or less sign
db.restaurants.find( { "grades.score": { $lt: 10 } } )

// what about logical operation like and and or?
// AND
db.restaurants.find( { "cuisine": "Italian", "address.zipcode": "10075" } )

// OR
db.restaurants.find(
   { $or: [ { "cuisine": "Italian" }, { "address.zipcode": "10075" } ] }
)

// sorting
db.restaurants.find().sort( { "borough": 1, "address.zipcode": 1 } )
To update a document
// update takes a query object first and then the fields to update
db.restaurants.update(
    { "name" : "Juni" },
    {
      $set: { "cuisine": "American (New)" },
      $currentDate: { "lastModified": true }
    }
)

// can also update embeded document
db.restaurants.update(
  { "restaurant_id" : "41156888" },
  { $set: { "address.street": "East 31st Street" } }
)

// update multiple documents at once
db.restaurants.update(
  { "address.zipcode": "10016", cuisine: "Other" },
  {
    $set: { cuisine: "Category To Be Determined" },
    $currentDate: { "lastModified": true }
  },
  { multi: true}
)

// remember if you don't specify $set then it will replace the whole document
db.restaurants.update(
   { "restaurant_id" : "41704620" },
   {
     "name" : "Vella 2",
     "address" : {
              "coord" : [ -73.9557413, 40.7720266 ],
              "building" : "1480",
              "street" : "2 Avenue",
              "zipcode" : "10075"
     }
   }
)
Delete documents
// remove all documents meeting this condition
db.restaurants.remove( { "borough": "Manhattan" } )

// to be on the safe side you can use `justOne` to remove a single document
db.restaurants.remove( { "borough": "Queens" }, { justOne: true } )

// if you want to remove all documents
db.restaurants.remove( { } )

// or you can drop the whole document
db.restaurants.drop()
SQL to MongoDB
Reference: https://docs.mongodb.com/manual/reference/sql-comparison/Links to an external site.

Terminology and concept table:

SQL Terms/Concepts	MongoDB Terms/Concepts
database	database
table	collection
row	document
column	field
index	index
table joins	embedded documents and linking
Create and Alter

SQL statements	MongoDB statements
CREATE TABLE users ( ... )	db.users.insert({ ... })
ALTER TABLE users ADD column DATETIME	db.users.update({}, { $set: { column: new Date() } }, { multi: true })
Reference
API documentation: https://docs.mongodb.com/manual/crud/Links to an external site.